{
    "version": "0.1",
    "pageContent": 
	{
        "_comments": "object that contains data for page labels, buttons, etc.",
        "navItems": 
		{
            "_common": 
			{
                "buttonBackToGallery": 
				{
                    "name": "Back To Gallery",
					"method": "backToGallery()",
					"idName": "backToGallery"	
                },
                "buttonStartTutorial": 
				{
                    "name": "Start Tutorial",
					"method": "startTutorialFromDetailsScreen()",
					"idName": "startTutorial"
                },
				"buttonViewDetails": 
				{
                    "name": "View Details",
					"method": "viewDetails()",
					"idName": "stepsViewDetails"	
                }
            }
        }
    },
    "tutorial": 
	{
        "_common": 
		{
            "name": "MQ - Using the LocalEnvironment and MQEndpoint Policy to override MQOutput configuration",
            "shortDescription": "Learn how to use the LocalEnvironment tree to dynamically configure the output queue written to by the MQOutput node and how to use an MQEndpoint Policy to override its queue manager connection.",
            "durationText": "This tutorial takes approximately",
            "durationTime": "10 minutes",
            "_resourceToOpenComment": "The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
            "resourceToOpen": "MainFlow",
            "helpLink": 
			{
                "text": "IBM Documentation",
           		"link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"
            }
        },
        "pageDetails": 
		{
            "topicsName": "Tutorial topics",
            "_topicListComment": "A short list of product concepts or tasks demonstrated by this tutorial",
            "topicList": 
			[                
				{
                    "title": "MQOutput node"
                },
				{
                    "title": "MQEndpoint Policy"
                }
            ],
            "outcomesName": "Learning outcomes",
            "_outcomesComment": "A description of what the user will have learned or accomplished by running this tutorial.",
            "outcomeList": 
			[
                {
                    "title": "Use IBM App Connect Enterprise to dynamically configure message flow settings when interacting with MQ."
                }
            ],
            "summary": 
			{
                "overviewName": "OVERVIEW",
                "_overviewComment": "A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
                "sections": 
				[
                    {
                        "section": "This tutorial demonstrates a simple message flow which is driven from a JSON input over HTTP. After receiving the message using an HTTPInput node, the same message is echoed back using an HTTPReply node. The HTTPInput node also drives an HTTPHeader node which removes the HTTP Input header. Next, a Mapping node sets the name of the output queue into the LocalEnvironment tree to dynamically control the MQOutput node later in the message flow. Before reaching the MQOutput node, an MQHeader node adds an MQMD header on to the message ready for output."
                    },
					{
                        "section": "The flow is configured to communicate with a local queue manager. The flow itself does not include configuration for the name of the queue manager. This is determined by the queue manager which is associated with the integration node where you deploy the flow (or associated with a standalone integration server if you choose to deploy it to this kind of environment)."
                    },
					{
                        "section": "The tutorial also provides an MQEndpoint Policy in a Policy Project which is used to specify the connection information to another queue manager. After testing the initial flow, the tutorial redeploys the flow using a BAR file which contains an override setting which associates the flow with the MQEndpoint Policy."
                    },					
                    {
                        "section": "The tutorial requires an integration node owned server, or a standalone server."
                    },
                    {
                        "section": "In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses an MQOutput node which is configured to interact with a local queue manager. The flows expect to be deployed to an integration node associated with a local queue manager. There are no other pre-requisites needed by the scenario."
                    }
                ]
            },
			"helpLinks": 
			{
				"_helpLinksComment": "Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
				"title": "Find out more",
				"details": 
				[
					{
						"title": "IBM Documentation link to ",
						"description": "Developing integration solutions by using applications",
						"link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm",
						"type": "web"
					}
				]
			}
        },
        "pageSteps": 
		{
            "create": 
			{
                "overview": 
				{
                    "name": "Create",
                    "heading": "Import projects",
                    "_createComment": "A description of what will happen when the user clicks Import.",
                    "sections": 
					[
                        {
                            "section": "When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleMQOutput</span> and a policy project named <span class='application'>MyExamplePolicies</span>."
                        },
                        {
                            "section": "<span class='application'>ExampleMQOutput</span> provides a single message flow named <span class='resource'>MQOutput</span>. The <span class='resource'>MQOutput</span> message flow is driven by an HTTPInput node configured to receive a simple JSON input message. The HTTPInput echoes the message to an HTTPReply, but also drives an HTTPHeader node to remove the HTTP Input header and then invoke a Mapping node. The Mapping node configures the LocalEnvironment tree at <code>LocalEnvironment.Destination.MQ.DestinationData.queueName</code> with the name of a desired output queue. After an MQHeader node, which creates the MQMD header, an MQOutput node is configured to distribute the message based upon the queue name in the LocalEnvironment, courtesy of the setting on the <span class='resource'>Advanced</span> tab which specifies <code>Destination Mode = Destination List</code>. Note that on the <span class='resource'>Basic</span> tab the property <code>Queue name = NOT_USED</code> will be ignored because of the other property settings just discussed."
						},
						{
                            "section": "The Policy Project <span class='application'>MyExamplePolicies</span> provides a single policy named <span class='resource'>MyMQPolicy.policyxml</span> which is configured with a different queue manager: <code>Queue manager name = TESTQM2</code>. This policy is used by the second part of the tutorial where the flow settings are overidden using a second BAR file which also carries this policy project."
						},						
                        {
			    			"section": "Once imported using the link on the right, the application <span class='application'>ExampleMQOutput</span> is ready to be deployed and tested. To deploy, two separate BAR files are provided: <span class='resource'>MQOutputDeploy1.bar</span> and <span class='resource'>MQOutputDeploy2.bar</span>. When to use each of these BAR files, is described on the Prepare tab."
						}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
                        {
                            "title": "IBM Documentation link to ",
                            "description": "Developing integration solutions by using applications",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm",
							"type": "web"
                        }
                    ]
                },
                "actions": 
				{
                    "title": "Create Actions",
                    "details": 
					[
                        {
                            "name": "Import",
                            "method": "importArtifacts()"
                        }
                    ]
                }
            },
            "prepare": 
			{
                "overview": 
				{
                    "name": "Prepare",
                    "heading": "Prepare two queue managers and an integration node, and then deploy the message flows",
                    "_prepareComment": "A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
                    "sections": 
		     [
			 {
                     "section":"The tutorial requires two MQ queue managers, each with the definition of a queue named OUTPUT.  Execute the following steps to prepare your environment accordingly:",
                     "steps":{
                        "type":"ordered",
                        "details":[
						   	{
                              "details":"Create an IBM MQ queue manager and configure it by completing the following steps:",
                              "substeps":{
                                 "type":"ordered",
                                 "details":[
                                    {
                                       "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM</span></code>"
                                    },
                                    {
                                       "details":"Next create a queue by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>define ql(OUTPUT)</code>"
                                    },									
                                    {
                                       "details":"Create and start a second queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM2</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM2</span></code>"
                                    },
									{
                                       "details":"Create a queue of the same name on this second queue manager by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM2</span></code><br><code>define ql(OUTPUT)</code>"
                                    }										
								 ]
                              }
                           },                           
                           {
                              "details":"Create an integration node which is associated with the first queue manager you created above by completing the following steps:",
                              "substeps":{
                                 "type":"ordered",
                                 "details":[
                                    {
                                       "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>TESTQM</span></code>"
                                    },
									{
                                       "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                                    },
                                    {
                                       "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                                    }
                                 ]
                              }
                           },
						   {
						   		"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>MQOutputDeploy1.bar</span> which you will find inside the <span class='application'>ExampleMQOutput</span> application."
                    		}							
                        ]
                     }
                  }
             ]
                },
                "helpLinks": 
				{
                }
            },
            "run": 
			{
                "overview": 
				{
                    "name": "Run",
                    "heading": "",
                    "_runComment": "The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
                "sections":[                            
                            {
                                "section": "<h4>Use the Flow Exerciser to test the tutorial scenario",
                                "steps": {
                                    "type": "ordered",
                                    "details": [                                      
                                    {
                                        "details": "Open <span class='resource'>MQOutput.msgflow</span>.",
                                        "substeps":{
                                        "type": "unordered",
                                        "details": 
								        [
                                        {
                                          "details": "Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                                        },
										{
                                            "details": "Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                                        },
                                        {
                                            "details": "A saved input message is provided named <span class='resource'>InputMessage</span> which contains this data:<br><span class='resource'>{\"Message\":\"Hello World\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. Close the dialog and a blue line is shown plotting the path of the message. You can click on the wires to inspect what the message looked like as it travelled through the flow. When you are finished return the flow to edit mode."
                				        },																				
										{
                                            "details": "The MQOutput node should have written a message to the queue OUTPUT on queue manager TESTQM.  You can check the queue depth using these commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>dis ql(OUTPUT) CURDEPTH</code><br>You can also read the message from the queue like this:<br><code>amqsget OUTPUT TESTQM</code><br><code>Sample AMQSGET0 start</code><br><code>message &lt;{\"Message\":\"Hello World\"}&gt;</code>"										
                                        },										
										{
											"details": "Back in the Toolkit, we will now use another method of overriding configuration. Look inside the <span class='application'>ExampleMQOutput</span> application to locate a second provided BAR file named <span class='application'>MQOutputDeploy2.bar</span>. Open the BAR file, and look at the Manage tab. You will see it contains both the <span class='application'>ExampleMQOutput</span> application and also a policy named <span class='application'>MyMQPolicy</span>. Expand the application and message flow:  <span class='application'>ExampleMQOutput / MQOutput.msgflow / MQOutput</span>. With the message flow node named <span class='application'>MQOutput</span> selected, look at the properties and you should see that the Policy property has been overriden."
										},
										{
											"details": "Drag and drop deploy <span class='application'>MQOutputDeploy2.bar</span>. As discussed above, in this BAR file the message flow's MQOutput node has an override property which has been set: <code>Policy = {MyExamplePolicies}:MyMQPolicy</code>  (IMPORTANT WARNING! Be careful not to accidentally remove this override if you choose to rebuild the BAR file!)"
										},
										{
                                            "details": "Repeat the same test, and you should find that this time, the message is written to the queue OUTPUT on queue manager TESTQM2 instead of queue manager TESTQM."										
										}
                                        ]
                                        }
                                    }
                                ]
                            }
                        },
			{
			    "section": "This tutorial has shown how to use the LocalEnvironment tree to dynamically configure the output queue written to by the MQOutput node and also how to use an MQEndpoint Policy to override its queue manager connection."			
			}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[ 						
 						{
                            "title": "IBM Documentation link to ",
                            "description": "MQOutput node",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04570_.htm",
							"type": "web"
                        },						
						{
                            "title": "IBM Documentation link to ",
                            "description": "Testing your message flow by using the Flow exerciser",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm",
							"type": "web"
                        }
                    ]
                }
            }
        }
    }
}